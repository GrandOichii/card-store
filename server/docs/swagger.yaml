basePath: /api/v1
definitions:
  dto.GetCard:
    properties:
      cardType:
        $ref: '#/definitions/model.CardType'
      expansion:
        type: string
      expansionName:
        type: string
      foiling:
        $ref: '#/definitions/model.Foiling'
      id:
        type: integer
      imageUrl:
        type: string
      inStockAmount:
        type: integer
      key:
        type: string
      language:
        $ref: '#/definitions/model.Language'
      name:
        type: string
      price:
        type: number
      text:
        type: string
    type: object
  dto.GetCart:
    properties:
      cards:
        items:
          $ref: '#/definitions/dto.GetCartSlot'
        type: array
    type: object
  dto.GetCartSlot:
    properties:
      amount:
        type: integer
      cardId:
        type: integer
    type: object
  dto.GetCollection:
    properties:
      cards:
        items:
          $ref: '#/definitions/dto.GetCollectionSlot'
        type: array
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.GetCollectionSlot:
    properties:
      amount:
        type: integer
      cardId:
        type: integer
    type: object
  dto.LoginDetails:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.PostCard:
    properties:
      expansion:
        type: string
      foiling:
        type: string
      imageUrl:
        type: string
      inStockAmount:
        type: integer
      key:
        type: string
      language:
        type: string
      name:
        type: string
      price:
        type: number
      text:
        type: string
      type:
        type: string
    required:
    - expansion
    - key
    - language
    - name
    - price
    - text
    - type
    type: object
  dto.PostCollection:
    properties:
      description:
        type: string
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.PostCollectionSlot:
    properties:
      amount:
        type: integer
      cardId:
        type: integer
    required:
    - amount
    - cardId
    type: object
  dto.PriceUpdate:
    properties:
      newPrice:
        type: number
    type: object
  dto.PrivateUserInfo:
    properties:
      id:
        type: string
      is_admin:
        type: boolean
      username:
        type: string
    type: object
  dto.RegisterDetails:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
      username:
        maxLength: 20
        minLength: 4
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.StockedAmountUpdate:
    properties:
      newAmount:
        type: integer
    type: object
  model.CardType:
    properties:
      id:
        type: string
      longName:
        type: string
    type: object
  model.Expansion:
    properties:
      fullName:
        type: string
      id:
        type: string
      shortName:
        type: string
    type: object
  model.Foiling:
    properties:
      descriptiveName:
        type: string
      id:
        type: string
      label:
        type: string
    type: object
  model.Language:
    properties:
      id:
        type: string
      longName:
        type: string
    type: object
  service.CardQueryResult:
    properties:
      cards:
        items:
          $ref: '#/definitions/dto.GetCard'
        type: array
      perPage:
        type: integer
      totalCards:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Service for buying/selling collectable cards
  title: Card store api
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Checks the user data and returns a jwt token on correct Login
      parameters:
      - description: Login details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDetails'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Logs in the user
      tags:
      - Auth
  /auth/register:
    post:
      description: Checks the user data and adds it to the repo
      parameters:
      - description: Register details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDetails'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Registers the user
      tags:
      - Auth
  /card:
    get:
      description: Fetches all cards that match the query
      parameters:
      - in: query
        name: expansion
        type: string
      - in: query
        name: foilOnly
        type: boolean
      - in: query
        name: inStockOnly
        type: boolean
      - in: query
        name: key
        type: string
      - in: query
        name: lang
        type: string
      - in: query
        name: maxPrice
        type: number
      - in: query
        name: minPrice
        type: number
      - in: query
        name: name
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: raw
        type: string
      - in: query
        name: t
        type: string
      - in: query
        name: type
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CardQueryResult'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Fetch card by query
      tags:
      - Card
    post:
      description: Creates a new card
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: new card data
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/dto.PostCard'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetCard'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Create new card
      tags:
      - Card
  /card/{id}:
    get:
      description: Fetches a card by it's id
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCard'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Fetch card by id
      tags:
      - Card
    patch:
      description: Updates an existing card
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      - description: new card data
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/dto.PostCard'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCard'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update card
      tags:
      - Card
  /card/expansions:
    get:
      description: Fetches all available expansions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Expansion'
      summary: Get all expansions
      tags:
      - Expansions
  /card/languages:
    get:
      description: Fetches all available languages
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Language'
      summary: Get all languages
      tags:
      - Language
  /card/price/{id}:
    patch:
      description: Updates an existing card's price
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      - description: new card price
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.PriceUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCard'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update card price
      tags:
      - Card
  /card/stocked/{id}:
    patch:
      description: Updates the amount of cards stocked
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: Card ID
        in: path
        name: id
        required: true
        type: integer
      - description: new card stock amount
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/dto.StockedAmountUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCard'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update card stocked amount
      tags:
      - Card
  /collection:
    post:
      description: Creates a new card collection
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: new collection data
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/dto.PostCollection'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetCollection'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Create new collection
      tags:
      - Collection
  /collection/{collectionId}:
    post:
      description: Adds, removes or alters a collection slot in an existing collection
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: Collection ID
        in: path
        name: collectionId
        required: true
        type: integer
      - description: new collection slot data
        in: body
        name: collectionSlot
        required: true
        schema:
          $ref: '#/definitions/dto.PostCollectionSlot'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetCollection'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Add, remove or alter collection slot
      tags:
      - Collection
  /collection/{id}:
    delete:
      description: Deletes a collection by it's id
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete collection
      tags:
      - Collection
    get:
      description: Fetches a collection by it's id
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCollection'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Fetch collection by id
      tags:
      - Collection
    patch:
      description: Deletes a collection's info by it's id
      parameters:
      - description: Collection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: new collection data
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/dto.PostCollection'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Update collection info
      tags:
      - Collection
  /collection/all:
    get:
      description: Fetches all the user's collections
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCollection'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Fetch all collections
      tags:
      - Collection
  /user:
    get:
      description: Gets the user's private information
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PrivateUserInfo'
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Get user info
      tags:
      - User
  /user/cart:
    get:
      description: Fetches the user's cart
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCart'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Fetch cart
      tags:
      - Cart
    post:
      description: Adds, removes or alters a cart slot
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        type: string
      - description: new cart slot data
        in: body
        name: collectionSlot
        required: true
        schema:
          $ref: '#/definitions/dto.PostCollectionSlot'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetCollection'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Add, remove or alter cart slot
      tags:
      - Collection
swagger: "2.0"
